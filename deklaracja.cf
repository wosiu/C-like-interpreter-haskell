-- JPP 2014/15, zad 2 - deklaracja jezyka, Michal Wos, mw336071
-- szkielet zrodlo: https://github.com/BNFC/bnfc/blob/master/examples/C/C.cf

entrypoints Program, Stm, Exp ;
Progr.  Program ::= [Compund_content] ;

ScompContentStm.	Compund_content ::= Stm ;
ScompContentDec.	Compund_content ::= Dec ;
ScompContentExp.	Compund_content ::= Exp2 ";" ;
ScompContentSpace.	Compund_content ::= Namespace ;

BlockSp.       Namespace ::= "{" [Compund_content] "}" ;
EmptyBlockSp.  Namespace ::= "{" "}" ;


(:[]).   [Compund_content] ::= Compund_content ;
(:).     [Compund_content] ::= Compund_content [Compund_content] ;


-- DECLARATIONS

VariableDec. Dec ::= Variable ";" ;
FuncDec.     Dec ::= Function ;

Tbool.        Type_specifier ::= "bool";
Tint.         Type_specifier ::= "int";
Tstring.      Type_specifier ::= "string";

DecBase.  Dec_base ::= Type_specifier Ident;

InitDec.               Variable ::= Initialized_variable ;
UninitDec.             Variable ::= Uninitialized_variable ;

UninitSimpleTypeDec.   Uninitialized_variable ::= Dec_base ;
UninitArr.             Uninitialized_variable ::= Dec_base "[" Exp2 "]" ;

InitSimpleTypeDec.     Initialized_variable ::= Dec_base "=" Initializer;
InitArr.               Initialized_variable ::= Dec_base "[" "]" "=" "{" [Initializer] "}" ;

InitExpr.    Initializer ::= Exp2 ;
separator nonempty Initializer "," ;

NoParamFunc.	Function ::= Dec_base "(" ")" Namespace ;
ParamFunc.	Function ::= Dec_base "(" [Param] ")" Namespace ;

separator nonempty Param "," ;

FuncParam.   Param ::= Uninitialized_variable ;


-- STATEMANTS

SelS.     Stm ::= Selection_stm ;
IterS.    Stm ::= Iter_stm ;
JumpS.    Stm ::= Jump_stm ;
PrintS.   Stm ::= Print_stm ;

Sif.      Selection_stm ::= "if" "(" Exp ")" Compund_content ;
SifElse.  Selection_stm ::= "if" "(" Exp ")" Compund_content "else" Compund_content ;


SswitchOne.   Selection_stm ::= "switch" "(" Exp ")" Switch_content ;
SswitchMany.  Selection_stm ::= "switch" "(" Exp ")" "{" [Switch_content] "}";

SswitchCase.  Switch_content ::= "case" Exp ":" [Compund_content] ;
SswitchDef.   Switch_content ::= "default" ":" [Compund_content] ;

(:[]).   [Switch_content] ::= Switch_content ;
(:).     [Switch_content] ::= Switch_content [Switch_content] ;


Swhile.     Iter_stm ::= "while" "(" Exp ")" Compund_content;
Sfor.       Iter_stm ::= "for" "(" Exp_or_empty ";" Exp_or_empty ";" Exp_or_empty ")" Compund_content ;
SemptyExp.    Exp_or_empty ::= ;
SnonemptyExp. Exp_or_empty ::= Exp ;

Scontinue.  Jump_stm ::= "continue" ";" ;
Sbreak.     Jump_stm ::= "break" ";" ;
Sreturn.    Jump_stm ::= "return" Exp ";" ;

SPrint.	  Print_stm ::= "print" "(" Exp2 ")" ";";


-- EXPRESSIONS

Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= LValue Assignment_op Exp2;

Elor.        Exp4  ::= Exp4 "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;				
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Epreinc.     Exp15 ::= "++" LValue;
Epredec.     Exp15 ::= "--" LValue;
Epreop.      Exp15 ::= Unary_operator Exp14;

Epostinc.    Exp16 ::= LValue "++";
Epostdec.    Exp16 ::= LValue "--";

Efunk.       Exp17 ::= Ident "(" ")";
Efunkpar.    Exp17 ::= Ident "(" [Exp2] ")";
separator nonempty Exp2 "," ;
Elval.       Exp17 ::= LValue;
Econst.      Exp17 ::= Constant;


Ebool.         Constant ::= CBool;
Eint.          Constant ::= Integer;
Estring.       Constant ::= String;

BTrue.	CBool ::= "true";
BFalse.	CBool ::= "false";

LVar.	LValue ::= Ident;
LArrEl.	LValue ::= Ident "[" Exp "]";

Especial. Constant_expression ::= Exp3;

--_. Exp   ::= Exp2 ;
--_. Exp2  ::= Exp3 ;
--_. Exp3  ::= Exp4 ;
--_. Exp4  ::= Exp5 ;
--_. Exp5  ::= Exp6 ;
--_. Exp6  ::= Exp7 ;
--_. Exp7  ::= Exp8 ;
--_. Exp8  ::= Exp9 ;
--_. Exp9  ::= Exp10 ;
--_. Exp10 ::= Exp11 ;
--_. Exp11 ::= Exp12 ;
--_. Exp12 ::= Exp13 ;
--_. Exp13 ::= Exp14 ;
--_. Exp14 ::= Exp15 ;
--_. Exp15 ::= Exp16 ;
--_. Exp16 ::= Exp17 ;
--_. Exp17 ::= "(" Exp ")" ;

coercions Exp 17 ;

Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Logicalneg.  Unary_operator ::= "!" ;

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;

comment "//";
comment "/*" "*/" ;
