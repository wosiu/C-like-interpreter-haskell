-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Pardeklaracja where
import Absdeklaracja
import Lexdeklaracja
import ErrM

}

%name pProgram Program
%name pStm Stm
%name pExp Exp

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '&' { PT _ (TS _ 3) }
 '&&' { PT _ (TS _ 4) }
 '(' { PT _ (TS _ 5) }
 ')' { PT _ (TS _ 6) }
 '*' { PT _ (TS _ 7) }
 '*=' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 '+=' { PT _ (TS _ 11) }
 ',' { PT _ (TS _ 12) }
 '-' { PT _ (TS _ 13) }
 '--' { PT _ (TS _ 14) }
 '-=' { PT _ (TS _ 15) }
 '/' { PT _ (TS _ 16) }
 '/=' { PT _ (TS _ 17) }
 ':' { PT _ (TS _ 18) }
 ';' { PT _ (TS _ 19) }
 '<' { PT _ (TS _ 20) }
 '<=' { PT _ (TS _ 21) }
 '=' { PT _ (TS _ 22) }
 '==' { PT _ (TS _ 23) }
 '>' { PT _ (TS _ 24) }
 '>=' { PT _ (TS _ 25) }
 '[' { PT _ (TS _ 26) }
 ']' { PT _ (TS _ 27) }
 'auto' { PT _ (TS _ 28) }
 'bool' { PT _ (TS _ 29) }
 'break' { PT _ (TS _ 30) }
 'case' { PT _ (TS _ 31) }
 'continue' { PT _ (TS _ 32) }
 'default' { PT _ (TS _ 33) }
 'else' { PT _ (TS _ 34) }
 'false' { PT _ (TS _ 35) }
 'for' { PT _ (TS _ 36) }
 'if' { PT _ (TS _ 37) }
 'int' { PT _ (TS _ 38) }
 'print' { PT _ (TS _ 39) }
 'return' { PT _ (TS _ 40) }
 'string' { PT _ (TS _ 41) }
 'switch' { PT _ (TS _ 42) }
 'true' { PT _ (TS _ 43) }
 'while' { PT _ (TS _ 44) }
 '{' { PT _ (TS _ 45) }
 '||' { PT _ (TS _ 46) }
 '}' { PT _ (TS _ 47) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListCompund_content { Progr $1 } 


Compund_content :: { Compund_content }
Compund_content : Stm { ScompContentStm $1 } 
  | Dec { ScompContentDec $1 }
  | Exp2 ';' { ScompContentExp $1 }
  | Namespace { ScompContentSpace $1 }


Namespace :: { Namespace }
Namespace : '{' ListCompund_content '}' { BlockSp $2 } 
  | '{' '}' { EmptyBlockSp }


ListCompund_content :: { [Compund_content] }
ListCompund_content : Compund_content { (:[]) $1 } 
  | Compund_content ListCompund_content { (:) $1 $2 }


Dec :: { Dec }
Dec : Variable ';' { VariableDec $1 } 
  | Function { FuncDec $1 }


Type_specifier :: { Type_specifier }
Type_specifier : 'bool' { Tbool } 
  | 'int' { Tint }
  | 'string' { Tstring }
  | 'auto' { Tauto }
  | ListType_specifier { Ttuple $1 }


ListType_specifier :: { [Type_specifier] }
ListType_specifier : Type_specifier { (:[]) $1 } 
  | Type_specifier ',' ListType_specifier { (:) $1 $3 }


Dec_base :: { Dec_base }
Dec_base : Type_specifier Ident { DecBase $1 $2 } 


Variable :: { Variable }
Variable : Initialized_variable { InitDec $1 } 
  | Uninitialized_variable { UninitDec $1 }


Uninitialized_variable :: { Uninitialized_variable }
Uninitialized_variable : Dec_base { UninitSimpleTypeDec $1 } 
  | Dec_base ListArrDet { UninitArr $1 $2 }


Initialized_variable :: { Initialized_variable }
Initialized_variable : Dec_base '=' Initializer { InitSimpleTypeDec $1 $3 } 
  | Dec_base ListArrDet '=' Initializer { InitArr $1 $2 $4 }


Initializer :: { Initializer }
Initializer : Exp2 { InitExpr $1 } 


ListInitializer :: { [Initializer] }
ListInitializer : Initializer { (:[]) $1 } 
  | Initializer ',' ListInitializer { (:) $1 $3 }


Function :: { Function }
Function : Dec_base '(' ')' Namespace { NoParamFunc $1 $4 } 
  | Dec_base '(' ListParam ')' Namespace { ParamFunc $1 $3 $5 }


ListParam :: { [Param] }
ListParam : Param { (:[]) $1 } 
  | Param ',' ListParam { (:) $1 $3 }


Param :: { Param }
Param : Uninitialized_variable { FuncParam $1 } 


Stm :: { Stm }
Stm : Selection_stm { SelS $1 } 
  | Iter_stm { IterS $1 }
  | Jump_stm { JumpS $1 }
  | Print_stm { PrintS $1 }


Selection_stm :: { Selection_stm }
Selection_stm : 'if' '(' Exp ')' Compund_content { Sif $3 $5 } 
  | 'if' '(' Exp ')' Compund_content 'else' Compund_content { SifElse $3 $5 $7 }
  | 'switch' '(' Exp ')' Switch_content { SswitchOne $3 $5 }
  | 'switch' '(' Exp ')' '{' ListSwitch_content '}' { SswitchMany $3 $6 }


Switch_content :: { Switch_content }
Switch_content : 'case' Exp ':' ListCompund_content { SswitchCase $2 $4 } 
  | 'default' ':' ListCompund_content { SswitchDef $3 }


ListSwitch_content :: { [Switch_content] }
ListSwitch_content : Switch_content { (:[]) $1 } 
  | Switch_content ListSwitch_content { (:) $1 $2 }


Iter_stm :: { Iter_stm }
Iter_stm : 'while' '(' Exp ')' Compund_content { Swhile $3 $5 } 
  | 'for' '(' Exp_or_empty ';' Exp_or_empty ';' Exp_or_empty ')' Compund_content { Sfor $3 $5 $7 $9 }


Exp_or_empty :: { Exp_or_empty }
Exp_or_empty : {- empty -} { SemptyExp } 
  | Exp { SnonemptyExp $1 }


Jump_stm :: { Jump_stm }
Jump_stm : 'continue' ';' { Scontinue } 
  | 'break' ';' { Sbreak }
  | 'return' Exp ';' { Sreturn $2 }


Print_stm :: { Print_stm }
Print_stm : 'print' '(' Exp2 ')' ';' { SPrint $3 } 


Exp :: { Exp }
Exp : Exp ',' Exp2 { Ecomma $1 $3 } 
  | Exp1 { $1 }


Exp2 :: { Exp }
Exp2 : LValue Assignment_op Exp2 { Eassign $1 $2 $3 } 
  | Exp3 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '||' Exp5 { Elor $1 $3 } 
  | Exp5 { $1 }


Exp5 :: { Exp }
Exp5 : Exp5 '&&' Exp6 { Eland $1 $3 } 
  | Exp6 { $1 }


Exp9 :: { Exp }
Exp9 : Exp9 '==' Exp10 { Eeq $1 $3 } 
  | Exp9 '!=' Exp10 { Eneq $1 $3 }
  | Exp10 { $1 }


Exp10 :: { Exp }
Exp10 : Exp10 '<' Exp11 { Elthen $1 $3 } 
  | Exp10 '>' Exp11 { Egrthen $1 $3 }
  | Exp10 '<=' Exp11 { Ele $1 $3 }
  | Exp10 '>=' Exp11 { Ege $1 $3 }
  | Exp11 { $1 }


Exp12 :: { Exp }
Exp12 : Exp12 '+' Exp13 { Eplus $1 $3 } 
  | Exp12 '-' Exp13 { Eminus $1 $3 }
  | Exp13 { $1 }


Exp13 :: { Exp }
Exp13 : Exp13 '*' Exp14 { Etimes $1 $3 } 
  | Exp13 '/' Exp14 { Ediv $1 $3 }
  | Exp14 { $1 }


Exp15 :: { Exp }
Exp15 : '++' LValue { Epreinc $2 } 
  | '--' LValue { Epredec $2 }
  | Unary_operator Exp14 { Epreop $1 $2 }
  | Exp16 { $1 }


Exp16 :: { Exp }
Exp16 : LValue '++' { Epostinc $1 } 
  | LValue '--' { Epostdec $1 }
  | Exp17 { $1 }


Exp17 :: { Exp }
Exp17 : Ident '(' ')' { Efunk $1 } 
  | Ident '(' ListExp2 ')' { Efunkpar $1 $3 }
  | LValue { Elval $1 }
  | LValue '&' { Eref $1 }
  | Constant { Econst $1 }
  | Exp18 { $1 }


ListExp2 :: { [Exp] }
ListExp2 : Exp2 { (:[]) $1 } 
  | Exp2 ',' ListExp2 { (:) $1 $3 }


Exp18 :: { Exp }
Exp18 : '(' ListExp2 ')' { Etuple $2 } 
  | Exp19 { $1 }


Exp19 :: { Exp }
Exp19 : '{' ListExp2 '}' { Earray $2 } 
  | '(' Exp ')' { $2 }


Exp1 :: { Exp }
Exp1 : Exp2 { $1 } 


Exp3 :: { Exp }
Exp3 : Exp4 { $1 } 


Exp6 :: { Exp }
Exp6 : Exp7 { $1 } 


Exp7 :: { Exp }
Exp7 : Exp8 { $1 } 


Exp8 :: { Exp }
Exp8 : Exp9 { $1 } 


Exp11 :: { Exp }
Exp11 : Exp12 { $1 } 


Exp14 :: { Exp }
Exp14 : Exp15 { $1 } 


Constant :: { Constant }
Constant : CBool { Ebool $1 } 
  | Integer { Eint $1 }
  | String { Estring $1 }


CBool :: { CBool }
CBool : 'true' { BTrue } 
  | 'false' { BFalse }


LValue :: { LValue }
LValue : Ident { LVar $1 } 
  | Ident ListArrDet { LArrEl $1 $2 }
  | '(' ListIdent ')' { LTuple $2 }


ArrDet :: { ArrDet }
ArrDet : '[' Exp ']' { ArrDet $2 } 
  | '[' ']' { EmptyArrDet }


ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } 
  | Ident ',' ListIdent { (:) $1 $3 }


ListArrDet :: { [ArrDet] }
ListArrDet : ArrDet { (:[]) $1 } 
  | ArrDet ListArrDet { (:) $1 $2 }


Constant_expression :: { Constant_expression }
Constant_expression : Exp3 { Especial $1 } 


Unary_operator :: { Unary_operator }
Unary_operator : '+' { Plus } 
  | '-' { Negative }
  | '!' { Logicalneg }


Assignment_op :: { Assignment_op }
Assignment_op : '=' { Assign } 
  | '*=' { AssignMul }
  | '/=' { AssignDiv }
  | '+=' { AssignAdd }
  | '-=' { AssignSub }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

