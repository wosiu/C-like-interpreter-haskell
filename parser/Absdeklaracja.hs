module Absdeklaracja where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Progr [Compund_content]
  deriving (Eq,Ord,Show)

data Compund_content =
   ScompContentStm Stm
 | ScompContentDec Dec
 | ScompContentExp Exp
 | ScompContentSpace Namespace
  deriving (Eq,Ord,Show)

data Namespace =
   BlockSp [Compund_content]
 | EmptyBlockSp
  deriving (Eq,Ord,Show)

data Dec =
   VariableDec Variable
 | FuncDec Function
  deriving (Eq,Ord,Show)

data Type_specifier =
   Tbool
 | Tint
 | Tstring
 | Tauto
 | Ttuple [Type_specifier]
  deriving (Eq,Ord,Show)

data Dec_base =
   DecBase Type_specifier Ident
  deriving (Eq,Ord,Show)

data Variable =
   InitDec Initialized_variable
 | UninitDec Uninitialized_variable
  deriving (Eq,Ord,Show)

data Uninitialized_variable =
   UninitSimpleTypeDec Dec_base
 | UninitArr Dec_base [ArrDet]
  deriving (Eq,Ord,Show)

data Initialized_variable =
   InitSimpleTypeDec Dec_base Initializer
 | InitArr Dec_base [ArrDet] Initializer
  deriving (Eq,Ord,Show)

data Initializer =
   InitExpr Exp
  deriving (Eq,Ord,Show)

data Function =
   NoParamFunc Dec_base Namespace
 | ParamFunc Dec_base [Param] Namespace
  deriving (Eq,Ord,Show)

data Param =
   FuncParam Uninitialized_variable
  deriving (Eq,Ord,Show)

data Stm =
   SelS Selection_stm
 | IterS Iter_stm
 | JumpS Jump_stm
 | PrintS Print_stm
  deriving (Eq,Ord,Show)

data Selection_stm =
   Sif Exp Compund_content
 | SifElse Exp Compund_content Compund_content
 | SswitchOne Exp Switch_content
 | SswitchMany Exp [Switch_content]
  deriving (Eq,Ord,Show)

data Switch_content =
   SswitchCase Exp [Compund_content]
 | SswitchDef [Compund_content]
  deriving (Eq,Ord,Show)

data Iter_stm =
   Swhile Exp Compund_content
 | Sfor Exp_or_empty Exp_or_empty Exp_or_empty Compund_content
  deriving (Eq,Ord,Show)

data Exp_or_empty =
   SemptyExp
 | SnonemptyExp Exp
  deriving (Eq,Ord,Show)

data Jump_stm =
   Scontinue
 | Sbreak
 | Sreturn Exp
  deriving (Eq,Ord,Show)

data Print_stm =
   SPrint Exp
  deriving (Eq,Ord,Show)

data Exp =
   Ecomma Exp Exp
 | Eassign LValue Assignment_op Exp
 | Elor Exp Exp
 | Eland Exp Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | Elthen Exp Exp
 | Egrthen Exp Exp
 | Ele Exp Exp
 | Ege Exp Exp
 | Eplus Exp Exp
 | Eminus Exp Exp
 | Etimes Exp Exp
 | Ediv Exp Exp
 | Epreinc LValue
 | Epredec LValue
 | Epreop Unary_operator Exp
 | Epostinc LValue
 | Epostdec LValue
 | Efunk Ident
 | Efunkpar Ident [Exp]
 | Elval LValue
 | Eref LValue
 | Econst Constant
 | Etuple [Exp]
 | Earray [Exp]
  deriving (Eq,Ord,Show)

data Constant =
   Ebool CBool
 | Eint Integer
 | Estring String
  deriving (Eq,Ord,Show)

data CBool =
   BTrue
 | BFalse
  deriving (Eq,Ord,Show)

data LValue =
   LVar Ident
 | LArrEl Ident [ArrDet]
 | LTuple [Ident]
  deriving (Eq,Ord,Show)

data ArrDet =
   ArrDet Exp
 | EmptyArrDet
  deriving (Eq,Ord,Show)

data Constant_expression =
   Especial Exp
  deriving (Eq,Ord,Show)

data Unary_operator =
   Plus
 | Negative
 | Logicalneg
  deriving (Eq,Ord,Show)

data Assignment_op =
   Assign
 | AssignMul
 | AssignDiv
 | AssignAdd
 | AssignSub
  deriving (Eq,Ord,Show)

