-- JPP 2014/15, zad 2 - deklaracja jezyka, Michal Wos, mw336071
-- szkielet zrodlo: https://github.com/BNFC/bnfc/blob/master/examples/C/C.cf

entrypoints Program, Stm, Exp ;


-- DECLARATIONS

Progr.  Program ::= [External_declaration] ;

(:[]).    [External_declaration] ::= External_declaration;
(:).      [External_declaration] ::= External_declaration [External_declaration];

Afunc.  External_declaration ::= Function_def ;
Global. External_declaration ::= Dec ;

NewFunc.     Function_def ::= Type_specifier Direct_declarator Compound_stm ;

Declarators.   Dec ::= Type_specifier Init_declarator ";" ;

OnlyDecl.  Init_declarator ::= Direct_declarator ;
InitDecl.  Init_declarator ::= Direct_declarator "=" Initializer;

Tbool.        Type_specifier ::= "bool";
Tint.         Type_specifier ::= "int";

Name.        Direct_declarator ::= Ident ;
ParenDecl.   Direct_declarator ::= "(" Direct_declarator ")" ;
InnitArray.  Direct_declarator ::= Direct_declarator "[" Constant_expression "]" ;
Incomplete.  Direct_declarator ::= Direct_declarator "[" "]" ;
NewFuncDec.  Direct_declarator ::= Direct_declarator "(" Parameter_type ")" ;
OldFuncDef.  Direct_declarator ::= Direct_declarator "(" [Ident] ")" ;
OldFuncDec.  Direct_declarator ::= Direct_declarator "(" ")" ;

AllSpec.  Parameter_type ::= Parameter_declarations ;

ParamDec.     Parameter_declarations ::= Parameter_declaration ;                   
MoreParamDec. Parameter_declarations ::= Parameter_declarations "," Parameter_declaration ;

OnlyType.      Parameter_declaration ::= Type_specifier ;
TypeAndParam.  Parameter_declaration ::= Type_specifier Direct_declarator ;
Abstract.      Parameter_declaration ::= Type_specifier Abstract_declarator ;


(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

InitExpr.    Initializer ::= Exp2 ;
InitListOne. Initializer ::= "{" Initializers "}" ;
InitListTwo. Initializer ::= "{" Initializers "," "}" ;


AnInit.   Initializers ::= Initializer ;
MoreInit. Initializers ::= Initializers "," Initializer ;


WithinParentes.  Abstract_declarator ::= "(" Abstract_declarator ")" ;
Array.           Abstract_declarator ::= "[" "]" ;
InitiatedArray.  Abstract_declarator ::= "[" Constant_expression "]" ;
UnInitiated.     Abstract_declarator ::= Abstract_declarator "[" "]" ;
Initiated.       Abstract_declarator ::= Abstract_declarator "[" Constant_expression "]" ;
OldFunction.     Abstract_declarator ::= "(" ")" ;
NewFunction.     Abstract_declarator ::= "(" Parameter_type ")" ;
OldFuncExpr.     Abstract_declarator ::= Abstract_declarator "(" ")" ;
NewFuncExpr.     Abstract_declarator ::= Abstract_declarator "(" Parameter_type ")" ;


-- STATEMANTS

LabelS.   Stm ::= Labeled_stm ;
CompS.    Stm ::= Compound_stm ;
ExprS.    Stm ::= Expression_stm ;
SelS.     Stm ::= Selection_stm ;
IterS.    Stm ::= Iter_stm ;
JumpS.    Stm ::= Jump_stm ;
PrintS.   Stm ::= Print_stm ;

SlabelTwo.   Labeled_stm ::= "case" Constant_expression ":" Stm ;
SlabelThree. Labeled_stm ::= "default" ":" Stm;

Scomp.   Compound_stm ::= "{" [Compund_stm_content] "}" ;

ScompContentEmpty.	Compund_stm_content ::= ;
ScompContentStm.	Compund_stm_content ::= Stm;
ScompContentDec.	Compund_stm_content ::= External_declaration;

(:[]).   [Compund_stm_content] ::= Compund_stm_content ;
(:).     [Compund_stm_content] ::= Compund_stm_content [Compund_stm_content];


SexprOne.   Expression_stm ::= ";" ;
SexprTwo.   Expression_stm ::= Exp ";" ;

SselOne.    Selection_stm ::= "if" "(" Exp ")" Stm ;
SselTwo.    Selection_stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SselThree.  Selection_stm ::= "switch" "(" Exp ")" Stm ;

SiterOne.   Iter_stm ::= "while" "(" Exp ")" Stm;
SiterThree. Iter_stm ::= "for" "(" Expression_stm Expression_stm ")" Stm ;
SiterFour.  Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Stm;

SjumpTwo.   Jump_stm ::= "continue" ";" ;
SjumpThree. Jump_stm ::= "break" ";" ;
SjumpFive.  Jump_stm ::= "return" Exp ";" ;

SPrint.	    Print_stm ::= "print" "(" Exp ")" ";";

(:[]).   [Stm] ::= Stm ;
(:).     [Stm] ::= Stm [Stm];


-- EXPRESSIONS

Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= Exp15 Assignment_op Exp2;
Elor.        Exp4  ::= Exp4 "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;				
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Epreinc.     Exp15 ::= "++" Exp15;
Epredec.     Exp15 ::= "--" Exp15;
Epreop.      Exp15 ::= Unary_operator Exp14;
Earray.      Exp16 ::= Exp16 "[" Exp "]" ;
Efunk.       Exp16 ::= Exp16 "(" ")";
Efunkpar.    Exp16 ::= Exp16 "(" [Exp2] ")";
Epostinc.    Exp16 ::= Exp16 "++";
Epostdec.    Exp16 ::= Exp16 "--";
Evar.        Exp17 ::= Ident;
Econst.      Exp17 ::= Constant;

Ebool.         Constant ::= CBool;
Eint.          Constant ::= Integer;  

BTrue.	CBool ::= "true";
BFalse.	CBool ::= "false";


Especial. Constant_expression ::= Exp3;

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
_. Exp14 ::= Exp15 ;
_. Exp15 ::= Exp16 ;
_. Exp16 ::= Exp17 ;
_. Exp17 ::= "(" Exp ")" ;


Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Logicalneg.  Unary_operator ::= "!" ;

(:[]).   [Exp2] ::= Exp2 ;
(:).     [Exp2] ::= Exp2 "," [Exp2];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;

comment "//";
