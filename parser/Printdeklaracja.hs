{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printdeklaracja where

-- pretty-printer generated by the BNF converter

import Absdeklaracja
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])



instance Print Program where
  prt i e = case e of
   Progr compund_contents -> prPrec i 0 (concatD [prt 0 compund_contents])


instance Print Compund_content where
  prt i e = case e of
   ScompContentStm stm -> prPrec i 0 (concatD [prt 0 stm])
   ScompContentDec dec -> prPrec i 0 (concatD [prt 0 dec])
   ScompContentExp exp -> prPrec i 0 (concatD [prt 2 exp , doc (showString ";")])
   ScompContentSpace namespace -> prPrec i 0 (concatD [prt 0 namespace])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Namespace where
  prt i e = case e of
   BlockSp compund_contents -> prPrec i 0 (concatD [doc (showString "{") , prt 0 compund_contents , doc (showString "}")])
   EmptyBlockSp  -> prPrec i 0 (concatD [doc (showString "{") , doc (showString "}")])


instance Print Dec where
  prt i e = case e of
   VariableDec variable -> prPrec i 0 (concatD [prt 0 variable , doc (showString ";")])
   FuncDec function -> prPrec i 0 (concatD [prt 0 function])


instance Print Type_specifier where
  prt i e = case e of
   Tbool  -> prPrec i 0 (concatD [doc (showString "bool")])
   Tint  -> prPrec i 0 (concatD [doc (showString "int")])
   Tstring  -> prPrec i 0 (concatD [doc (showString "string")])
   Tauto  -> prPrec i 0 (concatD [doc (showString "auto")])
   Ttuple type_specifiers -> prPrec i 0 (concatD [prt 0 type_specifiers])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Dec_base where
  prt i e = case e of
   DecBase type_specifier id -> prPrec i 0 (concatD [prt 0 type_specifier , prt 0 id])


instance Print Variable where
  prt i e = case e of
   InitDec initialized_variable -> prPrec i 0 (concatD [prt 0 initialized_variable])
   UninitDec uninitialized_variable -> prPrec i 0 (concatD [prt 0 uninitialized_variable])


instance Print Uninitialized_variable where
  prt i e = case e of
   UninitSimpleTypeDec dec_base -> prPrec i 0 (concatD [prt 0 dec_base])
   UninitArr dec_base arrdets -> prPrec i 0 (concatD [prt 0 dec_base , prt 0 arrdets])


instance Print Initialized_variable where
  prt i e = case e of
   InitSimpleTypeDec dec_base initializer -> prPrec i 0 (concatD [prt 0 dec_base , doc (showString "=") , prt 0 initializer])
   InitArr dec_base arrdets initializer -> prPrec i 0 (concatD [prt 0 dec_base , prt 0 arrdets , doc (showString "=") , prt 0 initializer])


instance Print Initializer where
  prt i e = case e of
   InitExpr exp -> prPrec i 0 (concatD [prt 2 exp])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Function where
  prt i e = case e of
   NoParamFunc dec_base namespace -> prPrec i 0 (concatD [prt 0 dec_base , doc (showString "(") , doc (showString ")") , prt 0 namespace])
   ParamFunc dec_base params namespace -> prPrec i 0 (concatD [prt 0 dec_base , doc (showString "(") , prt 0 params , doc (showString ")") , prt 0 namespace])


instance Print Param where
  prt i e = case e of
   FuncParam uninitialized_variable -> prPrec i 0 (concatD [prt 0 uninitialized_variable])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Stm where
  prt i e = case e of
   SelS selection_stm -> prPrec i 0 (concatD [prt 0 selection_stm])
   IterS iter_stm -> prPrec i 0 (concatD [prt 0 iter_stm])
   JumpS jump_stm -> prPrec i 0 (concatD [prt 0 jump_stm])
   PrintS print_stm -> prPrec i 0 (concatD [prt 0 print_stm])


instance Print Selection_stm where
  prt i e = case e of
   Sif exp compund_content -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 compund_content])
   SifElse exp compund_content0 compund_content -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 compund_content0 , doc (showString "else") , prt 0 compund_content])
   SswitchOne exp switch_content -> prPrec i 0 (concatD [doc (showString "switch") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 switch_content])
   SswitchMany exp switch_contents -> prPrec i 0 (concatD [doc (showString "switch") , doc (showString "(") , prt 0 exp , doc (showString ")") , doc (showString "{") , prt 0 switch_contents , doc (showString "}")])


instance Print Switch_content where
  prt i e = case e of
   SswitchCase exp compund_contents -> prPrec i 0 (concatD [doc (showString "case") , prt 0 exp , doc (showString ":") , prt 0 compund_contents])
   SswitchDef compund_contents -> prPrec i 0 (concatD [doc (showString "default") , doc (showString ":") , prt 0 compund_contents])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Iter_stm where
  prt i e = case e of
   Swhile exp compund_content -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 compund_content])
   Sfor exp_or_empty0 exp_or_empty1 exp_or_empty compund_content -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 exp_or_empty0 , doc (showString ";") , prt 0 exp_or_empty1 , doc (showString ";") , prt 0 exp_or_empty , doc (showString ")") , prt 0 compund_content])


instance Print Exp_or_empty where
  prt i e = case e of
   SemptyExp  -> prPrec i 0 (concatD [])
   SnonemptyExp exp -> prPrec i 0 (concatD [prt 0 exp])


instance Print Jump_stm where
  prt i e = case e of
   Scontinue  -> prPrec i 0 (concatD [doc (showString "continue") , doc (showString ";")])
   Sbreak  -> prPrec i 0 (concatD [doc (showString "break") , doc (showString ";")])
   Sreturn exp -> prPrec i 0 (concatD [doc (showString "return") , prt 0 exp , doc (showString ";")])


instance Print Print_stm where
  prt i e = case e of
   SPrint exp -> prPrec i 0 (concatD [doc (showString "print") , doc (showString "(") , prt 2 exp , doc (showString ")") , doc (showString ";")])


instance Print Exp where
  prt i e = case e of
   Ecomma exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString ",") , prt 2 exp])
   Eassign lvalue assignment_op exp -> prPrec i 2 (concatD [prt 0 lvalue , prt 0 assignment_op , prt 2 exp])
   Elor exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "||") , prt 5 exp])
   Eland exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "&&") , prt 6 exp])
   Eeq exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "==") , prt 10 exp])
   Eneq exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "!=") , prt 10 exp])
   Elthen exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "<") , prt 11 exp])
   Egrthen exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString ">") , prt 11 exp])
   Ele exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "<=") , prt 11 exp])
   Ege exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString ">=") , prt 11 exp])
   Eplus exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "+") , prt 13 exp])
   Eminus exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "-") , prt 13 exp])
   Etimes exp0 exp -> prPrec i 13 (concatD [prt 13 exp0 , doc (showString "*") , prt 14 exp])
   Ediv exp0 exp -> prPrec i 13 (concatD [prt 13 exp0 , doc (showString "/") , prt 14 exp])
   Epreinc lvalue -> prPrec i 15 (concatD [doc (showString "++") , prt 0 lvalue])
   Epredec lvalue -> prPrec i 15 (concatD [doc (showString "--") , prt 0 lvalue])
   Epreop unary_operator exp -> prPrec i 15 (concatD [prt 0 unary_operator , prt 14 exp])
   Epostinc lvalue -> prPrec i 16 (concatD [prt 0 lvalue , doc (showString "++")])
   Epostdec lvalue -> prPrec i 16 (concatD [prt 0 lvalue , doc (showString "--")])
   Efunk id -> prPrec i 17 (concatD [prt 0 id , doc (showString "(") , doc (showString ")")])
   Efunkpar id exps -> prPrec i 17 (concatD [prt 0 id , doc (showString "(") , prt 2 exps , doc (showString ")")])
   Elval lvalue -> prPrec i 17 (concatD [prt 0 lvalue])
   Eref lvalue -> prPrec i 17 (concatD [prt 0 lvalue , doc (showString "&")])
   Econst constant -> prPrec i 17 (concatD [prt 0 constant])
   Etuple exps -> prPrec i 18 (concatD [doc (showString "(") , prt 2 exps , doc (showString ")")])
   Earray exps -> prPrec i 19 (concatD [doc (showString "{") , prt 2 exps , doc (showString "}")])

  prtList es = case es of
   [x] -> (concatD [prt 2 x])
   x:xs -> (concatD [prt 2 x , doc (showString ",") , prt 2 xs])

instance Print Constant where
  prt i e = case e of
   Ebool cbool -> prPrec i 0 (concatD [prt 0 cbool])
   Eint n -> prPrec i 0 (concatD [prt 0 n])
   Estring str -> prPrec i 0 (concatD [prt 0 str])


instance Print CBool where
  prt i e = case e of
   BTrue  -> prPrec i 0 (concatD [doc (showString "true")])
   BFalse  -> prPrec i 0 (concatD [doc (showString "false")])


instance Print LValue where
  prt i e = case e of
   LVar id -> prPrec i 0 (concatD [prt 0 id])
   LArrEl id arrdets -> prPrec i 0 (concatD [prt 0 id , prt 0 arrdets])
   LTuple ids -> prPrec i 0 (concatD [doc (showString "(") , prt 0 ids , doc (showString ")")])


instance Print ArrDet where
  prt i e = case e of
   ArrDet exp -> prPrec i 0 (concatD [doc (showString "[") , prt 0 exp , doc (showString "]")])
   EmptyArrDet  -> prPrec i 0 (concatD [doc (showString "[") , doc (showString "]")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Constant_expression where
  prt i e = case e of
   Especial exp -> prPrec i 0 (concatD [prt 3 exp])


instance Print Unary_operator where
  prt i e = case e of
   Plus  -> prPrec i 0 (concatD [doc (showString "+")])
   Negative  -> prPrec i 0 (concatD [doc (showString "-")])
   Logicalneg  -> prPrec i 0 (concatD [doc (showString "!")])


instance Print Assignment_op where
  prt i e = case e of
   Assign  -> prPrec i 0 (concatD [doc (showString "=")])
   AssignMul  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssignDiv  -> prPrec i 0 (concatD [doc (showString "/=")])
   AssignAdd  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssignSub  -> prPrec i 0 (concatD [doc (showString "-=")])



